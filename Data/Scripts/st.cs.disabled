using Sandbox.ModAPI;
using Sandbox.ModAPI.Interfaces;
using Sandbox.Game;
using Sandbox.Definitions;

using Sandbox.Common;
using Sandbox.Common.ObjectBuilders;
using Sandbox.Common.Components;
using System;
using System.Collections.Generic;
using System.Text;
using VRage.ModAPI;
using VRage.Game.ModAPI;
using VRage.Game;
//using Sandbox.ModAPI.Ingame;
using VRageMath;
using VRage.Game.Components;
//using Ingame = Sandbox.ModAPI.Ingame;

namespace SuperTurret
{
    [VRage.Game.Components.MyEntityComponentDescriptor(typeof(Sandbox.Common.ObjectBuilders.MyObjectBuilder_LargeMissileTurret), true)]

    public class SuperTurretBlock : MyGameLogicComponent
    {

        private VRage.ObjectBuilders.MyObjectBuilder_EntityBase _objectBuilder;
        private DateTime lastUpdate = DateTime.MinValue;
        private IMyLargeTurretBase turret;

        public override void Close()
        {

        }

        public override void Init(VRage.ObjectBuilders.MyObjectBuilder_EntityBase objectBuilder)
        {
            _objectBuilder = objectBuilder;
            turret = (Entity as IMyLargeTurretBase);

             if (turret != null && turret.BlockDefinition.ToString().Contains("OKI230mmBAT"))
               Entity.NeedsUpdate |= MyEntityUpdateEnum.EACH_10TH_FRAME;
        }

        public override void MarkForClose()
        {
        }

        public override void UpdateAfterSimulation()
        {
        }

        public override void UpdateBeforeSimulation()
        {
        }

        public override void UpdateAfterSimulation100()
        {
        }

        public override void UpdateAfterSimulation10()
        {
            try
            {

                if (turret == null || !turret.Enabled || !turret.IsWorking || !turret.IsFunctional) return;
                var turretgrid = turret.GetTopMostParent();
                VRage.Game.ModAPI.IMyCubeGrid grid = (turretgrid as VRage.Game.ModAPI.IMyCubeGrid);
                //if (turretgrid.Physics.LinearVelocity.Length() > 1)
                if (!grid.IsStatic && turret.BlockDefinition.SubtypeName.ToString() == "OKI230mmBAT")
                {
                    
                    List<VRage.Game.ModAPI.IMySlimBlock> blocks = new List<VRage.Game.ModAPI.IMySlimBlock>();
                    grid.GetBlocks(blocks, b => b != null && b.FatBlock != null && (b.FatBlock as IMyLargeTurretBase) != null && b.FatBlock.IsWorking && b.FatBlock.IsFunctional &&
                            b.FatBlock.BlockDefinition.ToString().Contains("MyObjectBuilder_LargeMissileTurret"));

                    foreach (VRage.Game.ModAPI.IMySlimBlock b in blocks)
                    {
                        if ((b.FatBlock as IMyLargeTurretBase).Enabled)
                            (b.FatBlock as IMyLargeTurretBase).RequestEnable(false);
						
                    }
                }
            }
            catch (Exception e)
            {
                
            }
 
        }

        public override void UpdateBeforeSimulation10()
        {
        }

        public override void UpdateBeforeSimulation100()
        {

        }

        public override void UpdateOnceBeforeFrame()
        {
        }

        public override VRage.ObjectBuilders.MyObjectBuilder_EntityBase GetObjectBuilder(bool copy = false)
        {
            return _objectBuilder;
        }
    }
}
